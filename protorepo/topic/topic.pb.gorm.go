// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: topic.proto

/*
Package topic is a generated protocol buffer package.

It is generated from these files:
	topic.proto

It has these top-level messages:
	Topic
	QuTopic
	TopicList
	CreateTopicResponse
	GetTopicRequest
	GetTopicsByQuRequest
	GetQusByTopicRequest
	GetQusByTopicResponse
	AddTopicsToQuestionRequest
*/
package topic

import context "context"
import errors "errors"
import time "time"

import field_mask1 "google.golang.org/genproto/protobuf/field_mask"
import gorm1 "github.com/jinzhu/gorm"
import gorm2 "github.com/infobloxopen/atlas-app-toolkit/gorm"
import ptypes1 "github.com/golang/protobuf/ptypes"

import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/piex/interview/protorepo/question"

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = math.Inf

type TopicORM struct {
	CreatedAt time.Time `gorm:"not null"`
	Id        int64     `gorm:"primary_key;auto_increment"`
	Slug      string    `gorm:"not null"`
	UpdatedAt time.Time `gorm:"not null"`
}

// TableName overrides the default tablename generated by GORM
func (TopicORM) TableName() string {
	return "topic"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Topic) ToORM(ctx context.Context) (TopicORM, error) {
	to := TopicORM{}
	var err error
	if prehook, ok := interface{}(m).(TopicWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	if m.CreatedAt != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.CreatedAt); err != nil {
			return to, err
		}
		to.CreatedAt = t
	}
	if m.UpdatedAt != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.UpdatedAt); err != nil {
			return to, err
		}
		to.UpdatedAt = t
	}
	to.Slug = m.Slug
	if posthook, ok := interface{}(m).(TopicWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *TopicORM) ToPB(ctx context.Context) (Topic, error) {
	to := Topic{}
	var err error
	if prehook, ok := interface{}(m).(TopicWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	if to.CreatedAt, err = ptypes1.TimestampProto(m.CreatedAt); err != nil {
		return to, err
	}
	if to.UpdatedAt, err = ptypes1.TimestampProto(m.UpdatedAt); err != nil {
		return to, err
	}
	to.Slug = m.Slug
	if posthook, ok := interface{}(m).(TopicWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Topic the arg will be the target, the caller the one being converted from

// TopicBeforeToORM called before default ToORM code
type TopicWithBeforeToORM interface {
	BeforeToORM(context.Context, *TopicORM) error
}

// TopicAfterToORM called after default ToORM code
type TopicWithAfterToORM interface {
	AfterToORM(context.Context, *TopicORM) error
}

// TopicBeforeToPB called before default ToPB code
type TopicWithBeforeToPB interface {
	BeforeToPB(context.Context, *Topic) error
}

// TopicAfterToPB called after default ToPB code
type TopicWithAfterToPB interface {
	AfterToPB(context.Context, *Topic) error
}

type QuTopicORM struct {
	CreatedAt time.Time `gorm:"not null"`
	Id        int64     `gorm:"primary_key;auto_increment"`
	QuId      int64     `gorm:"not null"`
	TopicId   int64     `gorm:"not null"`
	UpdatedAt time.Time `gorm:"not null"`
}

// TableName overrides the default tablename generated by GORM
func (QuTopicORM) TableName() string {
	return "qu_topic"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *QuTopic) ToORM(ctx context.Context) (QuTopicORM, error) {
	to := QuTopicORM{}
	var err error
	if prehook, ok := interface{}(m).(QuTopicWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	if m.CreatedAt != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.CreatedAt); err != nil {
			return to, err
		}
		to.CreatedAt = t
	}
	if m.UpdatedAt != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.UpdatedAt); err != nil {
			return to, err
		}
		to.UpdatedAt = t
	}
	to.QuId = m.QuId
	to.TopicId = m.TopicId
	if posthook, ok := interface{}(m).(QuTopicWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *QuTopicORM) ToPB(ctx context.Context) (QuTopic, error) {
	to := QuTopic{}
	var err error
	if prehook, ok := interface{}(m).(QuTopicWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	if to.CreatedAt, err = ptypes1.TimestampProto(m.CreatedAt); err != nil {
		return to, err
	}
	if to.UpdatedAt, err = ptypes1.TimestampProto(m.UpdatedAt); err != nil {
		return to, err
	}
	to.QuId = m.QuId
	to.TopicId = m.TopicId
	if posthook, ok := interface{}(m).(QuTopicWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type QuTopic the arg will be the target, the caller the one being converted from

// QuTopicBeforeToORM called before default ToORM code
type QuTopicWithBeforeToORM interface {
	BeforeToORM(context.Context, *QuTopicORM) error
}

// QuTopicAfterToORM called after default ToORM code
type QuTopicWithAfterToORM interface {
	AfterToORM(context.Context, *QuTopicORM) error
}

// QuTopicBeforeToPB called before default ToPB code
type QuTopicWithBeforeToPB interface {
	BeforeToPB(context.Context, *QuTopic) error
}

// QuTopicAfterToPB called after default ToPB code
type QuTopicWithAfterToPB interface {
	AfterToPB(context.Context, *QuTopic) error
}

// DefaultCreateTopic executes a basic gorm create call
func DefaultCreateTopic(ctx context.Context, in *Topic, db *gorm1.DB) (*Topic, error) {
	if in == nil {
		return nil, errors.New("Nil argument to DefaultCreateTopic")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TopicORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TopicORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type TopicORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type TopicORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm1.DB) error
}

// DefaultReadTopic executes a basic gorm read call
func DefaultReadTopic(ctx context.Context, in *Topic, db *gorm1.DB) (*Topic, error) {
	if in == nil {
		return nil, errors.New("Nil argument to DefaultReadTopic")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.New("DefaultReadTopic requires a non-zero primary key")
	}
	if hook, ok := interface{}(&ormObj).(TopicORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm2.ApplyFieldSelection(ctx, db, nil, &TopicORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TopicORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := TopicORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(TopicORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type TopicORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type TopicORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type TopicORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm1.DB) error
}

func DefaultDeleteTopic(ctx context.Context, in *Topic, db *gorm1.DB) error {
	if in == nil {
		return errors.New("Nil argument to DefaultDeleteTopic")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.New("A non-zero ID value is required for a delete call")
	}
	if hook, ok := interface{}(&ormObj).(TopicORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&TopicORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(TopicORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type TopicORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type TopicORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm1.DB) error
}

func DefaultDeleteTopicSet(ctx context.Context, in []*Topic, db *gorm1.DB) error {
	if in == nil {
		return errors.New("Nil argument to DefaultDeleteTopicSet")
	}
	var err error
	keys := []int64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.New("A non-zero ID value is required for a delete call")
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&TopicORM{})).(TopicORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&TopicORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&TopicORM{})).(TopicORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type TopicORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Topic, *gorm1.DB) (*gorm1.DB, error)
}
type TopicORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Topic, *gorm1.DB) error
}

// DefaultStrictUpdateTopic clears first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateTopic(ctx context.Context, in *Topic, db *gorm1.DB) (*Topic, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateTopic")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &TopicORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(TopicORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(TopicORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TopicORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type TopicORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type TopicORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type TopicORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm1.DB) error
}

// DefaultPatchTopic executes a basic gorm update call with patch behavior
func DefaultPatchTopic(ctx context.Context, in *Topic, updateMask *field_mask1.FieldMask, db *gorm1.DB) (*Topic, error) {
	if in == nil {
		return nil, errors.New("Nil argument to DefaultPatchTopic")
	}
	var pbObj Topic
	var err error
	if hook, ok := interface{}(&pbObj).(TopicWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadTopic(ctx, &Topic{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(TopicWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskTopic(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(TopicWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateTopic(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(TopicWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type TopicWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Topic, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type TopicWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Topic, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type TopicWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Topic, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type TopicWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Topic, *field_mask1.FieldMask, *gorm1.DB) error
}

// DefaultApplyFieldMaskTopic patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskTopic(ctx context.Context, patchee *Topic, patcher *Topic, updateMask *field_mask1.FieldMask, prefix string, db *gorm1.DB) (*Topic, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.New("Patchee inputs to DefaultApplyFieldMaskTopic must be non-nil")
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"CreatedAt" {
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if f == prefix+"UpdatedAt" {
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if f == prefix+"Slug" {
			patchee.Slug = patcher.Slug
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListTopic executes a gorm list call
func DefaultListTopic(ctx context.Context, db *gorm1.DB) ([]*Topic, error) {
	in := Topic{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TopicORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm2.ApplyCollectionOperators(ctx, db, &TopicORM{}, &Topic{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TopicORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []TopicORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TopicORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Topic{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type TopicORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type TopicORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type TopicORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm1.DB, *[]TopicORM) error
}

// DefaultCreateQuTopic executes a basic gorm create call
func DefaultCreateQuTopic(ctx context.Context, in *QuTopic, db *gorm1.DB) (*QuTopic, error) {
	if in == nil {
		return nil, errors.New("Nil argument to DefaultCreateQuTopic")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(QuTopicORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(QuTopicORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type QuTopicORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type QuTopicORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm1.DB) error
}

// DefaultReadQuTopic executes a basic gorm read call
func DefaultReadQuTopic(ctx context.Context, in *QuTopic, db *gorm1.DB) (*QuTopic, error) {
	if in == nil {
		return nil, errors.New("Nil argument to DefaultReadQuTopic")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.New("DefaultReadQuTopic requires a non-zero primary key")
	}
	if hook, ok := interface{}(&ormObj).(QuTopicORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm2.ApplyFieldSelection(ctx, db, nil, &QuTopicORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(QuTopicORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := QuTopicORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(QuTopicORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type QuTopicORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type QuTopicORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type QuTopicORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm1.DB) error
}

func DefaultDeleteQuTopic(ctx context.Context, in *QuTopic, db *gorm1.DB) error {
	if in == nil {
		return errors.New("Nil argument to DefaultDeleteQuTopic")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.New("A non-zero ID value is required for a delete call")
	}
	if hook, ok := interface{}(&ormObj).(QuTopicORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&QuTopicORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(QuTopicORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type QuTopicORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type QuTopicORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm1.DB) error
}

func DefaultDeleteQuTopicSet(ctx context.Context, in []*QuTopic, db *gorm1.DB) error {
	if in == nil {
		return errors.New("Nil argument to DefaultDeleteQuTopicSet")
	}
	var err error
	keys := []int64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.New("A non-zero ID value is required for a delete call")
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&QuTopicORM{})).(QuTopicORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&QuTopicORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&QuTopicORM{})).(QuTopicORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type QuTopicORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*QuTopic, *gorm1.DB) (*gorm1.DB, error)
}
type QuTopicORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*QuTopic, *gorm1.DB) error
}

// DefaultStrictUpdateQuTopic clears first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateQuTopic(ctx context.Context, in *QuTopic, db *gorm1.DB) (*QuTopic, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateQuTopic")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &QuTopicORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(QuTopicORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(QuTopicORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(QuTopicORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type QuTopicORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type QuTopicORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type QuTopicORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm1.DB) error
}

// DefaultPatchQuTopic executes a basic gorm update call with patch behavior
func DefaultPatchQuTopic(ctx context.Context, in *QuTopic, updateMask *field_mask1.FieldMask, db *gorm1.DB) (*QuTopic, error) {
	if in == nil {
		return nil, errors.New("Nil argument to DefaultPatchQuTopic")
	}
	var pbObj QuTopic
	var err error
	if hook, ok := interface{}(&pbObj).(QuTopicWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadQuTopic(ctx, &QuTopic{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(QuTopicWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskQuTopic(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(QuTopicWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateQuTopic(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(QuTopicWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type QuTopicWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *QuTopic, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type QuTopicWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *QuTopic, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type QuTopicWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *QuTopic, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type QuTopicWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *QuTopic, *field_mask1.FieldMask, *gorm1.DB) error
}

// DefaultApplyFieldMaskQuTopic patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskQuTopic(ctx context.Context, patchee *QuTopic, patcher *QuTopic, updateMask *field_mask1.FieldMask, prefix string, db *gorm1.DB) (*QuTopic, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.New("Patchee inputs to DefaultApplyFieldMaskQuTopic must be non-nil")
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"CreatedAt" {
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if f == prefix+"UpdatedAt" {
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if f == prefix+"QuId" {
			patchee.QuId = patcher.QuId
			continue
		}
		if f == prefix+"TopicId" {
			patchee.TopicId = patcher.TopicId
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListQuTopic executes a gorm list call
func DefaultListQuTopic(ctx context.Context, db *gorm1.DB) ([]*QuTopic, error) {
	in := QuTopic{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(QuTopicORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm2.ApplyCollectionOperators(ctx, db, &QuTopicORM{}, &QuTopic{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(QuTopicORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []QuTopicORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(QuTopicORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*QuTopic{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type QuTopicORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type QuTopicORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type QuTopicORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm1.DB, *[]QuTopicORM) error
}
