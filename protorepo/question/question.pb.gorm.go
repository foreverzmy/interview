// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: question.proto

/*
Package question is a generated protocol buffer package.

It is generated from these files:
	question.proto

It has these top-level messages:
	Empty
	Question
	GetQuestionListRequest
	QuestionList
	CreateQuestionResponse
*/
package question

import context "context"
import errors "errors"
import time "time"

import field_mask1 "google.golang.org/genproto/protobuf/field_mask"
import gorm1 "github.com/jinzhu/gorm"
import gorm2 "github.com/infobloxopen/atlas-app-toolkit/gorm"
import ptypes1 "github.com/golang/protobuf/ptypes"

import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = math.Inf

type QuestionORM struct {
	Content    string    `gorm:"default:'';not null"`
	CreatedAt  time.Time `gorm:"not null"`
	Difficulty int32     `gorm:"default:0;not null"`
	Id         int64     `gorm:"primary_key;auto_increment"`
	Summary    string    `gorm:"not null"`
	Title      string    `gorm:"not null"`
	UpdatedAt  time.Time `gorm:"not null"`
}

// TableName overrides the default tablename generated by GORM
func (QuestionORM) TableName() string {
	return "question"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Question) ToORM(ctx context.Context) (QuestionORM, error) {
	to := QuestionORM{}
	var err error
	if prehook, ok := interface{}(m).(QuestionWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	if m.CreatedAt != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.CreatedAt); err != nil {
			return to, err
		}
		to.CreatedAt = t
	}
	if m.UpdatedAt != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.UpdatedAt); err != nil {
			return to, err
		}
		to.UpdatedAt = t
	}
	to.Title = m.Title
	to.Summary = m.Summary
	to.Content = m.Content
	to.Difficulty = m.Difficulty
	if posthook, ok := interface{}(m).(QuestionWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *QuestionORM) ToPB(ctx context.Context) (Question, error) {
	to := Question{}
	var err error
	if prehook, ok := interface{}(m).(QuestionWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	if to.CreatedAt, err = ptypes1.TimestampProto(m.CreatedAt); err != nil {
		return to, err
	}
	if to.UpdatedAt, err = ptypes1.TimestampProto(m.UpdatedAt); err != nil {
		return to, err
	}
	to.Title = m.Title
	to.Summary = m.Summary
	to.Content = m.Content
	to.Difficulty = m.Difficulty
	if posthook, ok := interface{}(m).(QuestionWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Question the arg will be the target, the caller the one being converted from

// QuestionBeforeToORM called before default ToORM code
type QuestionWithBeforeToORM interface {
	BeforeToORM(context.Context, *QuestionORM) error
}

// QuestionAfterToORM called after default ToORM code
type QuestionWithAfterToORM interface {
	AfterToORM(context.Context, *QuestionORM) error
}

// QuestionBeforeToPB called before default ToPB code
type QuestionWithBeforeToPB interface {
	BeforeToPB(context.Context, *Question) error
}

// QuestionAfterToPB called after default ToPB code
type QuestionWithAfterToPB interface {
	AfterToPB(context.Context, *Question) error
}

// DefaultCreateQuestion executes a basic gorm create call
func DefaultCreateQuestion(ctx context.Context, in *Question, db *gorm1.DB) (*Question, error) {
	if in == nil {
		return nil, errors.New("Nil argument to DefaultCreateQuestion")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(QuestionORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(QuestionORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type QuestionORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type QuestionORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm1.DB) error
}

// DefaultReadQuestion executes a basic gorm read call
func DefaultReadQuestion(ctx context.Context, in *Question, db *gorm1.DB) (*Question, error) {
	if in == nil {
		return nil, errors.New("Nil argument to DefaultReadQuestion")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.New("DefaultReadQuestion requires a non-zero primary key")
	}
	if hook, ok := interface{}(&ormObj).(QuestionORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm2.ApplyFieldSelection(ctx, db, nil, &QuestionORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(QuestionORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := QuestionORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(QuestionORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type QuestionORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type QuestionORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type QuestionORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm1.DB) error
}

func DefaultDeleteQuestion(ctx context.Context, in *Question, db *gorm1.DB) error {
	if in == nil {
		return errors.New("Nil argument to DefaultDeleteQuestion")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.New("A non-zero ID value is required for a delete call")
	}
	if hook, ok := interface{}(&ormObj).(QuestionORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&QuestionORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(QuestionORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type QuestionORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type QuestionORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm1.DB) error
}

func DefaultDeleteQuestionSet(ctx context.Context, in []*Question, db *gorm1.DB) error {
	if in == nil {
		return errors.New("Nil argument to DefaultDeleteQuestionSet")
	}
	var err error
	keys := []int64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.New("A non-zero ID value is required for a delete call")
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&QuestionORM{})).(QuestionORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&QuestionORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&QuestionORM{})).(QuestionORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type QuestionORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Question, *gorm1.DB) (*gorm1.DB, error)
}
type QuestionORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Question, *gorm1.DB) error
}

// DefaultStrictUpdateQuestion clears first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateQuestion(ctx context.Context, in *Question, db *gorm1.DB) (*Question, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateQuestion")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &QuestionORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(QuestionORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(QuestionORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(QuestionORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type QuestionORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type QuestionORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type QuestionORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm1.DB) error
}

// DefaultPatchQuestion executes a basic gorm update call with patch behavior
func DefaultPatchQuestion(ctx context.Context, in *Question, updateMask *field_mask1.FieldMask, db *gorm1.DB) (*Question, error) {
	if in == nil {
		return nil, errors.New("Nil argument to DefaultPatchQuestion")
	}
	var pbObj Question
	var err error
	if hook, ok := interface{}(&pbObj).(QuestionWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadQuestion(ctx, &Question{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(QuestionWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskQuestion(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(QuestionWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateQuestion(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(QuestionWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type QuestionWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Question, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type QuestionWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Question, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type QuestionWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Question, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type QuestionWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Question, *field_mask1.FieldMask, *gorm1.DB) error
}

// DefaultApplyFieldMaskQuestion patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskQuestion(ctx context.Context, patchee *Question, patcher *Question, updateMask *field_mask1.FieldMask, prefix string, db *gorm1.DB) (*Question, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.New("Patchee inputs to DefaultApplyFieldMaskQuestion must be non-nil")
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"CreatedAt" {
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if f == prefix+"UpdatedAt" {
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if f == prefix+"Title" {
			patchee.Title = patcher.Title
			continue
		}
		if f == prefix+"Summary" {
			patchee.Summary = patcher.Summary
			continue
		}
		if f == prefix+"Content" {
			patchee.Content = patcher.Content
			continue
		}
		if f == prefix+"Difficulty" {
			patchee.Difficulty = patcher.Difficulty
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListQuestion executes a gorm list call
func DefaultListQuestion(ctx context.Context, db *gorm1.DB) ([]*Question, error) {
	in := Question{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(QuestionORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm2.ApplyCollectionOperators(ctx, db, &QuestionORM{}, &Question{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(QuestionORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []QuestionORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(QuestionORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Question{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type QuestionORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type QuestionORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type QuestionORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm1.DB, *[]QuestionORM) error
}
